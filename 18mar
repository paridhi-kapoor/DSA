
##question 1 : WORD BREAK 
class Solution {
public:
      vector<int>dp ;
    
    bool dfs (int i , string s , vector<string> &wordDict){
        if(i<0 ) return 1 ;
        if(dp[i]!=-1) return dp[i]==1 ;

        for(string &word : wordDict){
            int word_len = word.size() ;
            if(i- word_len +1<0 ) continue ;
            if(s.rfind(word, i-word_len+1) == i-word_len+1 && dfs(i-word_len , s, wordDict)){
                dp[i]= 1 ;
                return 1 ;
            }
        }
        dp[i] =0 ;
        return 0 ;

     }

    bool wordBreak(string s, vector<string>& wordDict) {
        int n =s.size() ;
        dp.assign (n,-1) ;
        return dfs(n-1 , s, wordDict) ;
    }
};

QUESTION : LCPOTD 

class Solution {
public:
    int longestNiceSubarray(vector<int>& nums) {
        int n = nums.size();
        int max_length = 1;
        int left = 0;
        int used_bits = 0;
        
        for (int right = 0; right < n; ++right) {
            while ((used_bits & nums[right]) != 0) {
                used_bits ^= nums[left];
                ++left;
            }
            
            used_bits |= nums[right];
            max_length = max(max_length, right - left + 1);
        }
        
        return max_length;
    }
};

QUESTION 2 :VALID SUDOKU // previously solved  

class Solution {
public:
    bool isValidSudoku(vector<vector<char>>& board) {
        unordered_set<int> row[9] ;
        unordered_set<int>col[9] ;
        unordered_set<int>boxes[9] ;

        for(int r =0; r< 9; r++){
            for(int c=0; c< 9; c++){
                if(board[r][c]=='.'){
                    continue ;
                }
                char value = board[r][c] ; // just to make code simpler.
                int box_index = (r/3)*3 +(c/3) ;

                if(row[r].count(value)||col[c].count(value)|| boxes[box_index].count(value)){
                    return false ;
                }
                row[r].insert(value) ;
                col[c].insert(value) ;
                boxes[box_index].insert(value) ;
            }
        }

        return true ;
    }
};
